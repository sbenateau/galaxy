<tool id="ggplot_all" name="Plot w ggplot2" version="0.1.0" python_template_version="3.5">
  <macros>
      <import>macros.xml</import>
  </macros>
  <expand macro="requirements">
      <requirement type="package" version="1.2.1">r-svglite</requirement>
      <requirement type="package" version="1.12.2">r-data.table</requirement>
      <requirement type="package" version="1.27.2">r-hexbin</requirement>
      <requirement type="package" version="1.8_28">r-mgcv</requirement>
  </expand>
  <command detect_errors="exit_code"><![CDATA[
cat '$script' &&
Rscript '$script'
  ]]></command>
  <configfiles>
      <configfile name="script"><![CDATA[
@R_INIT@

## Import library
library(ggplot2)
library(data.table)

## Import data

input <- fread('$input1')

## Normalize secondary axis if necessary

#if $secondary.normalize == "TRUE"
  input <- data.frame(input)
  mainOps.y = input[ , $mainOps.yplot]
  secondary.y = input[ , $secondary.yplot]
  rangeRatio = diff(range(secondary.y)) / diff(range(mainOps.y))
  yReduction = secondary.y / rangeRatio
  yNormalized = yReduction - (mean(yReduction)-mean(mainOps.y))
  input[ ,  $secondary.yplot] <- yNormalized
#end if

## Plot initialisation and association with data

plot_out = ggplot(data = input)

## Primary layer coordinate

mappingCoord = aes_string(x = names(input)[$mainOps.xplot],
                          y = names(input)[$mainOps.yplot])

## coordinate for categories (boxplot, violin plot)
mappingCoordCat = aes_string(x = names(input)[$mainOps.xplot],
                           y = names(input)[$mainOps.yplot],
                           group = names(input)[$mainOps.xplot])

plot_out = plot_out + mappingCoord

## Group layers
## -------------


#for $i, $groupLayerNb in enumerate($mainOps.groupOpt.groupLayer)

#if $groupLayerNb.grouplayerType == "color"
mappingGroup = aes_string(colour = names(input)[$groupLayerNb.groupColID])
#elif $groupLayerNb.grouplayerType == "fill"
mappingGroup = aes_string(fill = names(input)[$groupLayerNb.groupColID])
#elif $groupLayerNb.grouplayerType == "shape"
mappingGroup = aes_string(shape = names(input)[$groupLayerNb.groupColID])
#elif $groupLayerNb.grouplayerType == "facetting"
mappingGroup = facet_wrap(names(input)[$groupLayerNb.groupColID], scales = '$groupLayerNb.scaletype')
#end if
plot_out = plot_out + mappingGroup
#end for

## Loop for primary Layer
## ------------------------

#for $primaryLayerNb in $mainOps.Layer:
    #if $primaryLayerNb.LayerType.layerType == 'errorbars'
         #set $yminErr = $primaryLayerNb.LayerType.yminErr
         #set $ymaxErr = $primaryLayerNb.LayerType.ymaxErr
    #end if


## Store variables

#set $layerTypeR = $primaryLayerNb.LayerType.layerType

layerSizeR = as.numeric('$primaryLayerNb.advanced.size')
colourR = as.numeric('$primaryLayerNb.advanced.pointcolor')
alphaR = as.numeric('$primaryLayerNb.advanced.alpha')
methodR = "auto"

@layerOptions@

plot_out = plot_out + plot_inter

#end for

## End primary layer
## ------------------

## Start secondary layer
## ------------------

## secondary mapping

mapping = aes_string(x = names(input)[$mainOps.xplot], y = names(input)[$secondary.yplot])

#for $i, $secondaryLayerNb in enumerate($secondary.Layer)

## TO TEST
#set $layerTypeR = $secondaryLayerNb.LayerType.layerType

@layerOptions@

plot_out = plot_out + plot_inter

#end for

@SAVE_OUTPUT@
        ]]></configfile>
    </configfiles>
    <inputs>
        <param name="input1" type="data" format="tabular" label="Input in tabular format" />
        <section name="mainOps" title="Main graph options" expanded="true">
        <param name="xplot" label="Column to plot on x-axis" type="data_column" data_ref="input1" numerical="false"/>
        <param name="yplot" label="Column to plot on y-axis" type="data_column" data_ref="input1" numerical="false"/>
        <section name="groupOpt" title="Group options" expanded="false">
            <repeat name="groupLayer" title="Group layer">
                <param name="grouplayerType" type="select" label="Type of group layer to plot" >
                    <option value="color">color (default)</option>
                    <option value="fill">fill</option>
                    <option value="shape">shape</option>
                    <option value="facetting">facetting</option>
                </param>
                <param name="groupColID" label="Column to plot as color groups" type="data_column" data_ref="input1" numerical="false"/>
                <param name="scaletype" type="boolean" truevalue="free" falsevalue="fixed" label="Allow different scales for each graph" />
            </repeat>
        </section>
        <expand macro="layer_options" />
        </section>
        <section name="secondary" title="Secondary Y axis options" expanded="false">
        <param name="yplot" label="Column to plot on secondary y-axis" type="data_column" data_ref="input1" numerical="false"/>
        <param name="normalize" type="boolean" truevalue="TRUE" falsevalue="FALSE" label="Normalize the data" />
        <expand macro="layer_options" />
        </section>
        <section name="out" title="Output Options" expanded="false">
            <expand macro="dimensions" />
        </section>
    </inputs>
    <outputs>
        <expand macro="additional_output" />
    </outputs>
    <help><![CDATA[
      This tool will generate a scatterplot representing data from two groups/conditions.

      The input data should be in tabular format and the user can determine which groups (columns) to plot.

      Multiple groups can be plotted on the same or multiple plots by providing a column with a group identifier under "Advanced - plotting multiple groups".

      Feel free to explore the (many) advanced options to customize your plot. Galaxy makes this type optimization easy for the user!

      The ouput is a pdf file with your scatterplot. The dimensions of this file can be modified under "Advanced - output dimensions"
    ]]></help>
</tool>
